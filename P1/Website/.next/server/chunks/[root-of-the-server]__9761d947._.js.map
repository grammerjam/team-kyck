{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///mnt/c/Users/cyh21/kyck/team-kyck/P1/Website/src/app/api/%5Btypes%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport fs from 'fs';\nimport path from 'path';\nimport { type } from 'os';\n\n/**\n * @param {import(\"next\").NextApiRequest} req\n */\nexport async function GET(req) {\n    try {\n        const paramOptions = new Set(['movie', 'tv', 'bookmarked']);\n        const typeFromUrl = req.url.split(\"/\").pop();\n        if (!paramOptions.has(typeFromUrl)) {\n            throw new Error('Invalid type');\n        }\n        const typeOptions = typeFromUrl;\n\n        const filePath = path.join(process.cwd(), 'public', 'assets', 'data.json');\n        const contents = fs.readFileSync(filePath, 'utf-8')\n        const data = JSON.parse(contents);\n\n        // Filter the data based on the type\n        let filteredData;\n        if (typeOptions === 'movie') {\n            filteredData = data.filter(item => item.category === 'Movie');\n        } else if (typeOptions === 'tv') {\n            filteredData = data.filter(item => item.category === 'TV Series');\n        } else if (typeOptions === 'bookmarked') {\n            filteredData = data.filter(item => item.isBookmarked);\n        }\n        // Return the filtered data\n        return NextResponse.json(filteredData, { status: 200 });\n    }\n    catch (error) {\n        console.error('Error reading data.json file: ', error);\n        return NextResponse.json({ error: 'Failed to fetch data' }, { status: 500 });\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAKO,eAAe,IAAI,GAAG;IACzB,IAAI;QACA,MAAM,eAAe,IAAI,IAAI;YAAC;YAAS;YAAM;SAAa;QAC1D,MAAM,cAAc,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG;QAC1C,IAAI,CAAC,aAAa,GAAG,CAAC,cAAc;YAChC,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,cAAc;QAEpB,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,UAAU;QAC9D,MAAM,WAAW,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC3C,MAAM,OAAO,KAAK,KAAK,CAAC;QAExB,oCAAoC;QACpC,IAAI;QACJ,IAAI,gBAAgB,SAAS;YACzB,eAAe,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,QAAQ,KAAK;QACzD,OAAO,IAAI,gBAAgB,MAAM;YAC7B,eAAe,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,QAAQ,KAAK;QACzD,OAAO,IAAI,gBAAgB,cAAc;YACrC,eAAe,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,YAAY;QACxD;QACA,2BAA2B;QAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,cAAc;YAAE,QAAQ;QAAI;IACzD,EACA,OAAO,OAAO;QACV,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACJ","debugId":null}}]
}